{"ast":null,"code":"import _classCallCheck from\"/Users/mcgaps/Desktop/workspace/react-todo-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/mcgaps/Desktop/workspace/react-todo-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/mcgaps/Desktop/workspace/react-todo-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/mcgaps/Desktop/workspace/react-todo-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import PropTypes from'prop-types';export var TodoItem=/*#__PURE__*/function(_Component){_inherits(TodoItem,_Component);var _super=_createSuper(TodoItem);function TodoItem(){var _this;_classCallCheck(this,TodoItem);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.getButtonStyle=function(){return{backgroud:'#ff0000',color:'#fff',border:'none',padding:'5px 9px',borderRadius:'50%',cursor:'pointer',float:'right'};};_this.getStyle=function(){return{backgroud:'#f4f4f4',padding:'10px',borderBottom:'1px #ccc dotted',textDecoration:_this.props.todo.completed?'line-through':'none'};};return _this;}_createClass(TodoItem,[{key:\"render\",value:function render(){var _this$props$todo=this.props.todo,id=_this$props$todo.id,title=_this$props$todo.title;return/*#__PURE__*/React.createElement(\"div\",{style:this.getStyle()},/*#__PURE__*/React.createElement(\"p\",null,/*#__PURE__*/React.createElement(\"input\",{type:\"checkbox\",onChange:this.props.markCompleted.bind(this,id)}),\" \",' ',title,/*#__PURE__*/React.createElement(\"button\",{onClick:this.props.delTodo.bind(this,id),style:this.getButtonStyle()},\"x\")));}}]);return TodoItem;}(Component);// Prop types\nTodoItem.PropType={todo:PropTypes.object.isRequired};export default TodoItem;","map":{"version":3,"sources":["/Users/mcgaps/Desktop/workspace/react-todo-app/src/components/todos/TodoItem.js"],"names":["React","Component","PropTypes","TodoItem","getButtonStyle","backgroud","color","border","padding","borderRadius","cursor","float","getStyle","borderBottom","textDecoration","props","todo","completed","id","title","markCompleted","bind","delTodo","PropType","object","isRequired"],"mappings":"ooBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,SAAP,KAAsB,YAAtB,CAGA,UAAaC,CAAAA,QAAb,mUAEIC,cAFJ,CAEqB,UAAM,CACnB,MAAO,CACHC,SAAS,CAAE,SADR,CAEHC,KAAK,CAAE,MAFJ,CAGHC,MAAM,CAAE,MAHL,CAIHC,OAAO,CAAE,SAJN,CAKHC,YAAY,CAAE,KALX,CAMHC,MAAM,CAAE,SANL,CAOHC,KAAK,CAAE,OAPJ,CAAP,CASH,CAZL,OAcIC,QAdJ,CAce,UAAM,CACb,MAAO,CACHP,SAAS,CAAE,SADR,CAEHG,OAAO,CAAE,MAFN,CAGHK,YAAY,CAAE,iBAHX,CAIHC,cAAc,CAAE,MAAKC,KAAL,CAAWC,IAAX,CAAgBC,SAAhB,CACZ,cADY,CACK,MALlB,CAAP,CAOH,CAtBL,2EAwBa,sBACiB,KAAKF,KAAL,CAAWC,IAD5B,CACGE,EADH,kBACGA,EADH,CACOC,KADP,kBACOA,KADP,CAEL,mBACI,2BAAK,KAAK,CAAE,KAAKP,QAAL,EAAZ,eACI,0CACI,6BAAO,IAAI,CAAC,UAAZ,CAAuB,QAAQ,CAC3B,KAAKG,KAAL,CAAWK,aAAX,CAAyBC,IAAzB,CAA8B,IAA9B,CAAoCH,EAApC,CADJ,EADJ,KAEqD,GAFrD,CAGKC,KAHL,cAII,8BAAQ,OAAO,CAAE,KAAKJ,KAAL,CAAWO,OAAX,CAAmBD,IAAnB,CAAwB,IAAxB,CAA8BH,EAA9B,CAAjB,CAAoD,KAAK,CAAE,KAAKd,cAAL,EAA3D,MAJJ,CADJ,CADJ,CAUH,CApCL,sBAA8BH,SAA9B,EAuCA;AACAE,QAAQ,CAACoB,QAAT,CAAoB,CAChBP,IAAI,CAAEd,SAAS,CAACsB,MAAV,CAAiBC,UADP,CAApB,CAIA,cAAetB,CAAAA,QAAf","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\n\n\nexport class TodoItem extends Component {\n\n    getButtonStyle = () => {\n        return {\n            backgroud: '#ff0000',\n            color: '#fff',\n            border: 'none',\n            padding: '5px 9px',\n            borderRadius: '50%',\n            cursor: 'pointer',\n            float: 'right'\n        }\n    }\n\n    getStyle = () => {\n        return {\n            backgroud: '#f4f4f4',\n            padding: '10px',\n            borderBottom: '1px #ccc dotted',\n            textDecoration: this.props.todo.completed ?\n                'line-through' : 'none'\n        }\n    }\n\n    render() {\n        const { id, title } = this.props.todo;\n        return (\n            <div style={this.getStyle()}>\n                <p>\n                    <input type=\"checkbox\" onChange={\n                        this.props.markCompleted.bind(this, id)} /> {' '}\n                    {title}\n                    <button onClick={this.props.delTodo.bind(this, id)} style={this.getButtonStyle()}>x</button>\n                </p>\n            </div>\n        )\n    }\n}\n\n// Prop types\nTodoItem.PropType = {\n    todo: PropTypes.object.isRequired\n}\n\nexport default TodoItem\n"]},"metadata":{},"sourceType":"module"}